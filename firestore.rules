rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est connecté
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fonction pour vérifier si l'utilisateur accède à ses propres données
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Fonction pour vérifier si l'utilisateur est admin
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/roles/admin);
    }

    // Configuration des règles pour les utilisateurs
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();

      // Sous-collection de rôles
      match /roles/{roleId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() &&
          request.auth.uid == userId &&
          roleId == 'user' &&
          !exists(/databases/$(database)/documents/users/$(userId)/roles/user);
        allow write: if isAdmin();
      }
    }

    // Collection des rôles globaux
    match /roles/{roleId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Collection des rôles utilisateurs
    match /userRoles/{email} {
      allow read: if isAuthenticated() && (
        request.auth.token.email == email ||
        isAdmin()
      );
      allow write: if isAdmin();
    }

    // Paramètres de matching
    match /settings/matching {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Préférences utilisateur
    match /userPreferences/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Historique des interactions
    match /interactions/{interactionId} {
      allow read: if isAuthenticated() && (
        interactionId.split('_')[0] == request.auth.uid ||
        interactionId.split('_')[1] == request.auth.uid
      );
      allow write: if isAuthenticated() && interactionId.split('_')[0] == request.auth.uid;
    }

    // Matches
    match /matches/{matchId} {
      allow read: if isAuthenticated() && (
        matchId.split('_')[0] == request.auth.uid ||
        matchId.split('_')[1] == request.auth.uid
      );
      allow write: if isAuthenticated() && (
        matchId.split('_')[0] == request.auth.uid ||
        matchId.split('_')[1] == request.auth.uid
      );
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow write: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        request.resource.data.userId == request.auth.uid
      );
    }

    // Historique des conversations
    match /conversationHistory/{historyId} {
      allow read: if isAuthenticated() && (
        resource.data.participants.hasAny([request.auth.uid])
      );
      allow create: if isAuthenticated() && (
        request.resource.data.participants.hasAny([request.auth.uid]) &&
        request.resource.data.userId == request.auth.uid
      );
      allow update: if isAuthenticated() &&
        resource.data.participants.hasAny([request.auth.uid]) &&
        resource.data.userId == request.auth.uid;
      allow delete: if false;
    }

    // Contact Requests
    match /contactRequests/{requestId} {
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid
      );
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.receiverId == request.auth.uid ||
        resource.data.senderId == request.auth.uid
      );
      allow delete: if false;
    }

    // Autoriser la création initiale du profil
    match /users/{userId} {
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }
  }
}