rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions utilitaires
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Règles pour les test_profiles (accessible en développement)
    match /test_profiles/{profileId} {
      allow read, write: if isAuthenticated();
    }

    // Règles pour la collection profiles
    match /profiles/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Règles pour la collection users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Règles pour les matchs
    match /matches/{matchId} {
      function isMatchParticipant() {
        return request.auth.uid in resource.data.users;
      }

      allow read: if isAuthenticated() && isMatchParticipant();
      allow create: if isAuthenticated() && 
        request.resource.data.users.hasAll([request.auth.uid]);
      allow update: if isAuthenticated() && isMatchParticipant();
      allow delete: if false; // Empêcher la suppression des matchs
    }

    // Règles pour les messages
    match /messages/{messageId} {
      function isMessageParticipant() {
        return exists(/databases/$(database)/documents/matches/$(resource.data.matchId)) &&
          request.auth.uid in get(/databases/$(database)/documents/matches/$(resource.data.matchId)).data.users;
      }

      allow read: if isAuthenticated() && isMessageParticipant();
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid &&
        exists(/databases/$(database)/documents/matches/$(request.resource.data.matchId));
      allow update: if isAuthenticated() && isMessageParticipant();
      allow delete: if false; // Empêcher la suppression des messages
    }

    // Règles pour les swipes
    match /swipes/{swipeId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.targetUserId);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if false; // Les swipes ne peuvent pas être modifiés
      allow delete: if false; // Les swipes ne peuvent pas être supprimés
    }

    // Règles pour les transactions de crédits
    match /credits/{transactionId} {
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if false; // Les transactions ne peuvent pas être modifiées
      allow delete: if false; // Les transactions ne peuvent pas être supprimées
    }
  }
}